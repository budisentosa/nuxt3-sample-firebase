AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Nuxt 3 Serverless SSR in AWS
Parameters:
  Stage:
    Description: Environment type.
    Type: String
    Default: staging
    AllowedValues:
      - prod
      - staging
    ConstraintDescription: must specify prod or staging
  BucketName:
    Description: Bucket Name for each environment type.
    Type: String
    Default: staging-static.ibizplatform.com
    AllowedValues:
      - static.ibizplatform.com
      - staging-static.ibizplatform.com
  DomainName:
    Description: Domain Name for each environment type.
    Type: String
    AllowedValues:
      - prod.ibizplatform.com
      - staging-ui.ibizplatform.com
Conditions:
  ProdDeployment: !Equals 
    - !Ref Stage
    - prod    
Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: $default
      Domain:
        DomainName: !Ref DomainName
        CertificateArn: arn:aws:acm:me-south-1:420602142378:certificate/af7c17ca-36ba-4dc1-9527-9c86dcea60ad
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: Z17ESKOVSPGHTF
  HttpApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .output/server/
      Handler: index.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 300
      Description: Nuxt 3 SSR Lambda
      AutoPublishAlias: Live
      ProvisionedConcurrencyConfig:
          !If [ProdDeployment, ProvisionedConcurrentExecutions: 1, !Ref AWS::NoValue]
      Events:
        ProxyResource:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: $default
            Method: any      

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Serverless website OA'

  CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for serverless website"
        DefaultRootObject: ""
        Enabled: true
        HttpVersion: http2and3
        Aliases: 
          - !Ref BucketName
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:420602142378:certificate/73afe488-7013-47e0-9ef8-f9a7733c2ad3
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only

        # List of origins that Cloudfront will connect to
        Origins:
          - Id: s3-website
            DomainName: !GetAtt S3Bucket.RegionalDomainName
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity: 
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: true
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
          ResponseHeadersPolicyId: eaab4381-ed33-4a86-88ca-d9558dc6cd63
          TargetOriginId: s3-website
          ViewerProtocolPolicy : redirect-to-https

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      # Change bucket name to reflect your website
      BucketName: !Ref BucketName
      CorsConfiguration:
              CorsRules:
                - AllowedHeaders:
                    - '*'
                  AllowedMethods:
                    - GET
                  AllowedOrigins:
                    - '*'
                  ExposedHeaders:
                    - Date
                  Id: myCORSRuleId1
                  MaxAge: 3600

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
      # Restricting access to cloudfront only.
        Statement:
          -
            Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              Service: "cloudfront.amazonaws.com"
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub "arn:aws:iam::cloudfront:420602142378:distribution/{CloudfrontDistribution}"


# Outputs:
#   HttpApiUrl:
#     Description: URL of your API endpoint
#     Value:
#       Fn::Sub: 'https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${StageName}/'
#   HttpApiId:
#     Description: Api id of HttpApi
#     Value:
#       Ref: HttpApi

  # nuxtLambda:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: .output/server/
  #     Handler: index.handler
  #     Runtime: nodejs16.x
  #     Architectures:
  #       - x86_64
  #     MemorySize: 128
  #     Timeout: 100
  #     Description: Nuxt 3 SSR Lambda
  #     Events:
  #       ProxyResource:
  #         Type: Api
  #         Properties:
  #           Path: /{proxy+}
  #           Method: any

